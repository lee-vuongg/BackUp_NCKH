using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using TCN_NCKH.Models.DBModel;
using X.PagedList;

namespace TCN_NCKH.Areas.Admin.Controllers
{
    [Area("Admin")]
    public class CauhoisController : Controller
    {
        private readonly NghienCuuKhoaHocContext _context;

        public CauhoisController(NghienCuuKhoaHocContext context)
        {
            _context = context;
        }

        // GET: Admin/Cauhois
        public async Task<IActionResult> Index()
        {
            // Include Dethi information to display exam name
            var cauhois = _context.Cauhois.Include(c => c.Dethi)
                                        .OrderBy(c => c.Id); // Default sorting
            return View(await cauhois.ToListAsync());
        }

        // GET: Admin/Cauhois/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                TempData["ErrorMessage"] = "Không tìm thấy ID câu hỏi.";
                return NotFound();
            }

            var cauhoi = await _context.Cauhois
                .Include(c => c.Dethi)
                .FirstOrDefaultAsync(m => m.Id == id);

            if (cauhoi == null)
            {
                TempData["ErrorMessage"] = "Câu hỏi không tồn tại.";
                return RedirectToAction(nameof(Index));
            }

            return View(cauhoi);
        }

        // GET: Admin/Cauhois/Create
        public IActionResult Create()
        {
            // Display exam name in the dropdown, not just ID
            // Assuming Dethi has a property named Tendethi for display
            ViewData["Dethiid"] = new SelectList(_context.Dethis.OrderBy(d => d.Tendethi), "Id", "Tendethi");
            return View();
        }

        // POST: Admin/Cauhois/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("Noidung,Dethiid,Loaicauhoi,Diem")] Cauhoi cauhoi) // Id is auto-generated by DB or assigned later
        {
            if (ModelState.IsValid)
            {
                try
                {
                    _context.Add(cauhoi);
                    await _context.SaveChangesAsync();
                    TempData["SuccessMessage"] = "Câu hỏi đã được tạo thành công!";
                    return RedirectToAction(nameof(Index));
                }
                catch (Exception ex)
                {
                    TempData["ErrorMessage"] = $"Đã xảy ra lỗi khi tạo câu hỏi: {ex.Message}";
                    // Log detailed error if needed
                }
            }
            // If ModelState is invalid or there's an error during saving
            // Re-populate SelectList for Dethiid
            ViewData["Dethiid"] = new SelectList(_context.Dethis.OrderBy(d => d.Tendethi), "Id", "Tendethi", cauhoi.Dethiid);

            if (TempData["ErrorMessage"] == null) // Ensure existing error message isn't overwritten
            {
                TempData["ErrorMessage"] = "Thông tin câu hỏi không hợp lệ. Vui lòng kiểm tra lại.";
            }
            // Concatenate all validation errors for clear display
            string validationErrors = string.Join("<br/>", ModelState.Values
                                                  .SelectMany(v => v.Errors)
                                                  .Select(e => e.ErrorMessage));
            if (!string.IsNullOrEmpty(validationErrors))
            {
                TempData["ErrorMessage"] = (TempData["ErrorMessage"] as string ?? "") + "<br/>" + validationErrors;
            }

            return View(cauhoi);
        }

        // GET: Admin/Cauhois/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                TempData["ErrorMessage"] = "Không tìm thấy ID câu hỏi.";
                return NotFound();
            }

            var cauhoi = await _context.Cauhois.FindAsync(id);
            if (cauhoi == null)
            {
                TempData["ErrorMessage"] = "Câu hỏi không tồn tại.";
                return RedirectToAction(nameof(Index));
            }
            // Display exam name in the dropdown
            ViewData["Dethiid"] = new SelectList(_context.Dethis.OrderBy(d => d.Tendethi), "Id", "Tendethi", cauhoi.Dethiid);
            return View(cauhoi);
        }

        // POST: Admin/Cauhois/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("Id,Noidung,Dethiid,Loaicauhoi,Diem")] Cauhoi cauhoiFromForm) // Renamed parameter for clarity
        {
            if (id != cauhoiFromForm.Id)
            {
                TempData["ErrorMessage"] = "ID câu hỏi không hợp lệ.";
                return NotFound();
            }

            // Get the existing question object from the database and track it
            var existingCauhoi = await _context.Cauhois.FindAsync(id);

            if (existingCauhoi == null)
            {
                TempData["ErrorMessage"] = "Câu hỏi không tồn tại.";
                return NotFound();
            }

            // Check ModelState.IsValid early
            if (!ModelState.IsValid)
            {
                string validationErrors = string.Join("<br/>", ModelState.Values
                                                      .SelectMany(v => v.Errors)
                                                      .Select(e => e.ErrorMessage));
                TempData["ErrorMessage"] = "Có lỗi xác thực: <br/>" + validationErrors;

                ViewData["Dethiid"] = new SelectList(_context.Dethis.OrderBy(d => d.Tendethi), "Id", "Tendethi", existingCauhoi.Dethiid);
                return View(existingCauhoi); // Return existingCauhoi object to display the form with full data
            }

            try
            {
                // Manually update properties from the form to the tracked object
                existingCauhoi.Noidung = cauhoiFromForm.Noidung;
                existingCauhoi.Dethiid = cauhoiFromForm.Dethiid;
                existingCauhoi.Loaicauhoi = cauhoiFromForm.Loaicauhoi;
                existingCauhoi.Diem = cauhoiFromForm.Diem;

                // EF Core will automatically detect changes and update
                await _context.SaveChangesAsync();
                TempData["SuccessMessage"] = "Câu hỏi đã được cập nhật thành công!";
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!CauhoiExists(cauhoiFromForm.Id)) // Use cauhoiFromForm.Id
                {
                    TempData["ErrorMessage"] = "Câu hỏi không tồn tại hoặc đã bị xóa bởi người khác.";
                    return NotFound();
                }
                else
                {
                    TempData["ErrorMessage"] = "Đã xảy ra lỗi đồng thời khi cập nhật dữ liệu. Vui lòng thử lại.";
                    throw; // Re-throw exception for admin to check logs if needed
                }
            }
            catch (Exception ex)
            {
                TempData["ErrorMessage"] = $"Đã xảy ra lỗi hệ thống: {ex.Message}";
                // Log detailed error if needed
            }

            return RedirectToAction(nameof(Index));
        }

        // GET: Admin/Cauhois/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                TempData["ErrorMessage"] = "Không tìm thấy ID câu hỏi.";
                return NotFound();
            }

            var cauhoi = await _context.Cauhois
                .Include(c => c.Dethi)
                .FirstOrDefaultAsync(m => m.Id == id);

            if (cauhoi == null)
            {
                TempData["ErrorMessage"] = "Câu hỏi không tồn tại.";
                return RedirectToAction(nameof(Index));
            }

            return View(cauhoi);
        }

        // POST: Admin/Cauhois/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var cauhoi = await _context.Cauhois.FindAsync(id);
            if (cauhoi == null)
            {
                TempData["ErrorMessage"] = "Câu hỏi không tồn tại hoặc đã bị xóa trước đó.";
                return RedirectToAction(nameof(Index));
            }

            try
            {
                _context.Cauhois.Remove(cauhoi);
                await _context.SaveChangesAsync();
                TempData["SuccessMessage"] = "Câu hỏi đã được xóa thành công!";
            }
            catch (Exception ex)
            {
                TempData["ErrorMessage"] = $"Đã xảy ra lỗi khi xóa câu hỏi: {ex.Message}";
                // Log detailed error
            }
            return RedirectToAction(nameof(Index));
        }

        private bool CauhoiExists(int id)
        {
            return _context.Cauhois.Any(e => e.Id == id);
        }
    }
}