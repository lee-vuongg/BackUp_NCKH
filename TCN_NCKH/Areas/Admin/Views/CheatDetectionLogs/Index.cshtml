@model TCN_NCKH.Areas.Admin.Controllers.CheatDetectionLogsController.CheatDetectionLogListViewModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "Quản Lý Log Gian Lận Webcam";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml"; // Đảm bảo đúng layout của Admin
}

<div class="container-fluid">
    <h1 class="mt-4">
        <i class="fas fa-eye-slash"></i> @ViewData["Title"]
    </h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a href="/Admin/AdminHome">Dashboard</a></li>
        <li class="breadcrumb-item active">@ViewData["Title"]</li>
    </ol>

    <!-- Khu vực hiển thị thông báo (Success/Error) -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }

    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Kiểm tra Webcam và Ghi nhận Gian lận (Mô phỏng)</h6>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <h5 class="mb-3">Luồng Webcam</h5>
                    <video id="webcamVideo" width="100%" height="auto" autoplay playsinline muted class="rounded shadow-sm border"></video>
                    <canvas id="webcamCanvas" style="display: none;"></canvas>
                    <div class="mt-3">
                        <button id="startButton" class="btn btn-success mr-2"><i class="fas fa-play-circle"></i> Bật Webcam</button>
                        <button id="stopButton" class="btn btn-danger" disabled><i class="fas fa-stop-circle"></i> Dừng Webcam</button>
                    </div>
                    <p id="statusMessage" class="mt-3 text-info font-weight-bold">Đang chờ webcam...</p>
                    <p class="text-muted text-sm">*Ứng dụng này sẽ yêu cầu quyền truy cập webcam của mi.</p>
                </div>
                <div class="col-md-6">
                    <h5 class="mb-3">Lịch sử Phát hiện Gian lận gần đây (của người dùng hiện tại)</h5>
                    <div id="detectionLogs" class="border rounded p-3 bg-light" style="max-height: 300px; overflow-y: auto;">
                        <p class="text-muted text-center">Đang tải lịch sử...</p>
                    </div>
                    <p class="text-muted text-sm mt-2">
                        *Lịch sử này hiển thị các log gần đây nhất của người dùng hiện tại.
                        Để xem toàn bộ lịch sử, sử dụng bảng dưới.
                    </p>
                </div>
            </div>
        </div>
    </div>

    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Danh sách Log Gian Lận</h6>
            <a asp-action="Create" class="btn btn-primary btn-sm">
                <i class="fas fa-plus"></i> Tạo Log Mới (Thủ công)
            </a>
        </div>
        <div class="card-body">
            <!-- Form lọc -->
            <form asp-action="Index" method="get" class="mb-4">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="filterUserId" class="control-label">Lọc theo User ID:</label>
                            <input type="text" name="filterUserId" id="filterUserId" class="form-control" value="@Model.FilterUserId" placeholder="Nhập User ID để lọc..." />
                        </div>
                    </div>
                    <div class="col-md-6 d-flex align-items-end">
                        <button type="submit" class="btn btn-info mr-2"><i class="fas fa-filter"></i> Lọc</button>
                        <a asp-action="Index" class="btn btn-secondary"><i class="fas fa-redo"></i> Xóa lọc</a>
                    </div>
                </div>
            </form>

            @if (!Model.Logs.Any())
            {
                <div class="alert alert-info">Không có log gian lận nào được tìm thấy.</div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-bordered table-hover" width="100%" cellspacing="0">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>User ID</th>
                                <th>Tên Người dùng</th>
                                <th>Loại Phát hiện</th>
                                <th>Chi tiết</th>
                                <th>Thời gian</th>
                                <th>Lịch sử làm bài ID</th>
                                <th>Mã Đề thi (Lịch sử)</th>
                                <th>Thời điểm bắt đầu (Lịch sử)</th>
                                <th class="text-center">Hành Động</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var log in Model.Logs)
                            {
                                <tr>
                                    <td>@log.Id</td>
                                    <td>@log.UserId</td>
                                    <td>@log.UserName</td>
                                    <td>@log.DetectionType</td>
                                    <td>@log.Details</td>
                                    <td>@log.Timestamp.ToString("dd/MM/yyyy HH:mm:ss")</td>
                                    <td>@(log.LichSuLamBaiId?.ToString() ?? "N/A")</td> @* Hiển thị "N/A" nếu null *@
                                    <td>@log.LichSuLamBaiMaDeThi</td>
                                    <td>@(log.LichSuLamBaiThoiDiemBatDau?.ToString("dd/MM/yyyy HH:mm:ss") ?? "N/A")</td>
                                    <td class="text-center">
                                        <a asp-action="Edit" asp-route-id="@log.Id" class="btn btn-warning btn-sm" title="Chỉnh sửa">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <a asp-action="Details" asp-route-id="@log.Id" class="btn btn-info btn-sm ml-1" title="Chi tiết">
                                            <i class="fas fa-info-circle"></i>
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@log.Id" class="btn btn-danger btn-sm ml-1" title="Xóa">
                                            <i class="fas fa-trash-alt"></i>
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Phần phân trang -->
                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(Model.PageNumber == 1 ? "disabled" : "")">
                            <a class="page-link" asp-action="Index"
                               asp-route-page="@(Model.PageNumber - 1)"
                               asp-route-pageSize="@Model.PageSize"
                               asp-route-filterUserId="@Model.FilterUserId"
                               tabindex="-1" aria-disabled="@(Model.PageNumber == 1)">Trước</a>
                        </li>
                        @for (int i = 1; i <= Model.TotalPages; i++)
                        {
                            <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                <a class="page-link" asp-action="Index"
                                   asp-route-page="@i"
                                   asp-route-pageSize="@Model.PageSize"
                                   asp-route-filterUserId="@Model.FilterUserId">@i</a>
                            </li>
                        }
                        <li class="page-item @(Model.PageNumber == Model.TotalPages ? "disabled" : "")">
                            <a class="page-link" asp-action="Index"
                               asp-route-page="@(Model.PageNumber + 1)"
                               asp-route-pageSize="@Model.PageSize"
                               asp-route-filterUserId="@Model.FilterUserId"
                               aria-disabled="@(Model.PageNumber == Model.TotalPages)">Tiếp</a>
                        </li>
                    </ul>
                </nav>
                <div class="text-center text-muted mt-2">
                    Hiển thị @Model.Logs.Count() / @Model.TotalItems log. Trang @Model.PageNumber / @Model.TotalPages
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Lấy ID người dùng hiện tại và ID lịch sử làm bài (THAY THẾ BẰNG LOGIC THỰC TẾ CỦA MI)
        // Ví dụ: Lấy từ session, cookie, hoặc một hidden input trên trang thi
        // Đây là ví dụ cho mục đích test, trong thực tế cần lấy từ Authentication Context
        const currentUserId = "SV001"; // Ví dụ: ID của sinh viên đang làm bài
        const currentLichSuLamBaiId = 123; // Ví dụ: ID của bản ghi LichSuLamBai hiện tại (có thể null nếu không trong bài thi)

        const video = document.getElementById('webcamVideo');
        const canvas = document.getElementById('webcamCanvas');
        const startButton = document.getElementById('startButton');
        const stopButton = document.getElementById('stopButton');
        const statusMessage = document.getElementById('statusMessage');
        const detectionLogsDiv = document.getElementById('detectionLogs');
        let stream = null;
        let detectionInterval = null;

        // Hàm bắt đầu webcam
        async function startWebcam() {
            try {
                stream = await navigator.mediaDevices.getUserMedia({ video: true });
                video.srcObject = stream;
                startButton.disabled = true;
                stopButton.disabled = false;
                statusMessage.textContent = 'Webcam đang hoạt động. Đang chờ phát hiện gian lận...';

                // Bắt đầu interval để chụp khung hình và gửi lên server
                detectionInterval = setInterval(sendFrameForDetection, 3000); // Gửi mỗi 3 giây
            } catch (err) {
                console.error("Lỗi truy cập webcam:", err);
                statusMessage.textContent = `Lỗi: Không thể truy cập webcam. Vui lòng cấp quyền. (${err.name})`;
                startButton.disabled = false;
                stopButton.disabled = true;
            }
        }

        // Hàm dừng webcam
        function stopWebcam() {
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
                video.srcObject = null;
            }
            clearInterval(detectionInterval); // Dừng interval
            startButton.disabled = false;
            stopButton.disabled = true;
            statusMessage.textContent = 'Webcam đã dừng.';
        }

        // Hàm gửi khung hình webcam lên server để xử lý (mô phỏng AI)
        async function sendFrameForDetection() {
            if (!video.srcObject) {
                console.warn("Webcam chưa hoạt động. Không thể gửi khung hình.");
                return;
            }

            if (video.readyState < 2) {
                console.log("Video chưa sẵn sàng để chụp khung hình. Đang chờ...");
                return;
            }

            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            const context = canvas.getContext('2d');
            context.drawImage(video, 0, 0, canvas.width, canvas.height);

            // --- Logic mô phỏng phát hiện gian lận CLIENT-SIDE ---
            let detectionType = "Không có";
            let details = "Không có gian lận được phát hiện.";

            if (Math.random() < 0.1) { // 10% cơ hội phát hiện gian lận
                const cheatTypes = ["Nhìn ra ngoài", "Nói chuyện", "Dùng điện thoại (mô phỏng)"];
                detectionType = cheatTypes[Math.floor(Math.random() * cheatTypes.length)];
                details = `Phát hiện gian lận loại: ${detectionType}`;
                statusMessage.textContent = `!!! PHÁT HIỆN GIAN LẬN: ${detectionType} !!!`;
                statusMessage.className = 'mt-3 text-danger font-weight-bold';
            } else {
                statusMessage.textContent = 'Webcam đang hoạt động. Không có gian lận.';
                statusMessage.className = 'mt-3 text-info font-weight-bold';
            }

            // === GỬI DỮ LIỆU ĐẾN SERVER (ASP.NET Core Controller) ===
            try {
                const response = await fetch('@Url.Action("LogDetection", "CheatDetectionLogs", new { area = "Admin" })', { // Đổi tên controller
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({
                        UserId: currentUserId,
                        DetectionType: detectionType,
                        Details: details,
                        LichSuLamBaiId: currentLichSuLamBaiId
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log("Server response:", result.message);
                    loadDetectionLogs(currentUserId); // Tải lại log của người dùng hiện tại
                } else {
                    const errorData = await response.json();
                    console.error("Lỗi khi gửi log gian lận:", errorData);
                    statusMessage.textContent = `Lỗi gửi log: ${errorData.message || response.statusText}`;
                    statusMessage.className = 'mt-3 text-danger font-weight-bold';
                }
            } catch (error) {
                console.error("Lỗi mạng hoặc server không phản hồi:", error);
                statusMessage.textContent = `Lỗi kết nối server: ${error.message}`;
                statusMessage.className = 'mt-3 text-danger font-weight-bold';
            }
        }

        // Hàm tải lịch sử phát hiện gian lận từ server
        async function loadDetectionLogs(userIdToLoad) {
            detectionLogsDiv.innerHTML = '<p class="text-muted text-center"><i class="fas fa-spinner fa-spin"></i> Đang tải lịch sử...</p>';
            try {
                const response = await fetch(`@Url.Action("GetDetectionLogs", "CheatDetectionLogs", new { area = "Admin" })}?userId=${userIdToLoad}`); // Đổi tên controller
                if (response.ok) {
                    const logs = await response.json();
                    if (logs.length === 0) {
                        detectionLogsDiv.innerHTML = '<p class="text-muted text-center">Chưa có sự kiện gian lận nào được ghi lại cho người dùng này.</p>';
                    } else {
                        detectionLogsDiv.innerHTML = '';
                        logs.forEach(log => {
                            const logElement = document.createElement('div');
                            logElement.className = 'alert alert-warning alert-sm mb-2 p-2';
                            const timestamp = new Date(log.timestamp).toLocaleString('vi-VN');
                            let logDetails = `<strong>[${timestamp}]</strong>: ${log.detectionType}`;
                            if (log.details) {
                                logDetails += ` - ${log.details}`;
                            }
                            if (log.userName && log.userName !== log.userId) { // Chỉ hiện tên nếu khác ID
                                logDetails += ` (User: ${log.userName})`;
                            }
                            if (log.lichSuLamBaiMaDeThi) {
                                logDetails += ` (Bài thi: ${log.lichSuLamBaiMaDeThi}`;
                                if (log.lichSuLamBaiThoiDiemBatDau) {
                                    logDetails += `, Bắt đầu: ${new Date(log.lichSuLamBaiThoiDiemBatDau).toLocaleString('vi-VN')}`;
                                }
                                logDetails += `)`;
                            }
                            logElement.innerHTML = logDetails;
                            detectionLogsDiv.appendChild(logElement);
                        });
                    }
                } else {
                    detectionLogsDiv.innerHTML = '<p class="text-danger text-center">Không thể tải lịch sử gian lận.</p>';
                    console.error("Lỗi khi tải lịch sử gian lận:", response.statusText);
                }
            } catch (error) {
                detectionLogsDiv.innerHTML = '<p class="text-danger text-center">Lỗi kết nối khi tải lịch sử.</p>';
                console.error("Lỗi mạng khi tải lịch sử gian lận:", error);
            }
        }

        // Gán sự kiện cho nút
        startButton.addEventListener('click', startWebcam);
        stopButton.addEventListener('click', stopWebcam);

        // Tải lịch sử khi trang vừa load (cho người dùng hiện tại)
        document.addEventListener('DOMContentLoaded', () => {
            loadDetectionLogs(currentUserId);
        });
    </script>
    @* Đảm bảo _AdminLayout.cshtml của mi đã bao gồm jQuery và Bootstrap JS. *@
}
